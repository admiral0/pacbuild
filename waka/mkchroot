#!/bin/bash

myver="0.96"

# include for enviromental settings
source /etc/makepkg.conf

# default values
TARBALL=""
PKGDEST=""
LOGDEST=""
CONFIGFILE="/etc/pacbuild/mkchroot.conf"
PACMANFILE=""
MAKEPKGFILE=""
CHROOTPATH=""
SCRIPTPATH=""
DESTCHROOTPATH=""
TMPCHROOTPATH=""

# message functions
# TODO these are the same as makepkg functions, so make them
# common in /usr/share/archlinux

plain() {
	if [ "$USE_COLOR" = "Y" -o "$USE_COLOR" = "y" ]; then
		echo -e "    \033[1;1m$1\033[1;0m" >&2
	else
		echo "    $1" >&2
	fi
}

msg() {
	if [ "$USE_COLOR" = "Y" -o "$USE_COLOR" = "y" ]; then
		echo -e "\033[1;32m==>\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> $1" >&2
	fi
}

warning() {
	if [ "$USE_COLOR" = "Y" -o "$USE_COLOR" = "y" ]; then
		echo -e "\033[1;33m==> WARNING:\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> WARNING: $1" >&2
	fi
}

error() {
	if [ "$USE_COLOR" = "Y" -o "$USE_COLOR" = "y" ]; then
		echo -e "\033[1;31m==> ERROR:\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> ERROR: $1" >&2
	fi
}

# wakachroot functions

# clean up any files left in the chroot path
cleanup() {
	if [ -d $rootpath ]; then
		# check for proc and sys dirs so we don't try to remove them
		if [ -e $rootpath/sys/devices -o -e $rootpath/proc/cpuinfo ]; then
			fs_umount
		fi

		msg "Removing old virtual root... (This may take a while)"
		umount $DESTCHROOTPATH
		rm -rf $DESTCHROOTPATH $TMPCHROOTPATH
		msg "Virtual root removal complete."
	fi
}

# make a new chroot directory at the specified path
makeroot() {
	local ret=0
	cleanup
	msg "Creating chroot directory..."
	mount -t aufs -o br=${TMPCHROOTPATH}:${CHROOTPATH} none ${DESTCHROOTPATH} || ret=1

	return $ret
}

# mount sysfs and proc filesystems, and mount /dev
fs_mount() {
	local ret=0
	msg "Mounting sysfs..."
	mount -t sysfs  sysfs  $DESTCHROOTPATH/sys || ret=1
	msg "Mounting procfs..."
	mount -t proc   proc   $DESTCHROOTPATH/proc || ret=1
	msg "Mounting dev..."
	mount -o bind /dev $DESTCHROOTPATH/dev || ret=1
	msg "Copying /etc/mtab..."
	cp -p /etc/mtab $DESTCHROOTPATH/etc/mtab || ret=1

	return $ret
}

# unmount sysfs and proc filesystems (doing nothing with copied devfs)
fs_umount() {
	local ret=0
	msg "Umounting sysfs..."
	umount $DESTCHROOTPATH/sys || ret=1
	msg "Umounting dev..."
	umount $DESTCHROOTPATH/dev || ret=1
	msg "Umounting proc"
	umount $DESTCHROOTPATH/proc || ret=1

	return $ret
}

# bind the 'global package cache' inside of the chroot (to save on downloading)
fs_bind() {
	local ret=0
	msg "Using global package cache..."
	mkdir -p $DESTCHROOTPATH/var/cache/pacman/pkg || ret=1

	# Try hard linking- if that doesn't work, try copying
	mount -o bind $CHROOTPATH/var/cache/pacman/pkg/ $DESTCHROOTPATH/var/cache/pacman/ || ret=1

	return $ret
}

# unbind the 'global package cache', copying any new downloads back
fs_unbind() {
	local ret=0
	msg "Unmounting global package cache..."
	
	umount $DESTCHROOTPATH/var/cache/pacman/ || ret=1
	return ret
}

# copy resolv.conf from host system and create a pacman.conf file
conf_update() {
	cp -L /etc/resolv.conf $rootpath/etc || return 1

	if [ "$PACMANFILE" = "" ]; then
		cp /etc/pacman.conf $DESTCHROOTPATH/etc/pacman.conf || return 1
	else
		cp $PACMANFILE $DESTCHROOTPATH/etc/pacman.conf || return 1
	fi
	if [ "$MAKEPKGFILE" = "" ]; then
		cp /etc/makepkg.conf $DESTCHROOTPATH/etc/makepkg.conf || return 1
	else
		cp $MAKEPKGFILE $DESTCHROOTPATH/etc/makepkg.conf || return 1
	fi
}

# usage function
usage() {
	echo "mkchrootpkg version $myver"
	echo "usage: $0 [options] <source package>"
	echo "options:"
	echo "  -h, --help         This help"
	echo "  -w <destdir>       Write package to <destdir> instead of the working dir"
	echo "  -l <destdir>       Write build log to <destdir> instead of the working dir"
	echo "  -o <configfile>    Use an alternate config file"
	echo "  -p <pacmanconfig>  Use an alternate pacman config file"
	echo "  -m <makepkgconfig> Use an alternate makepkg config file"
	echo "  -c <chrootpath>    Use a chroot"
	echo "  -i <preparescript> Script executed before entering chroot"
}

# PROGRAM START

# parse command line arguments
while [ $# -ne 0 ]; do
	case $1 in
		--help)
			usage
			exit 0
			;;
		--*)
			usage
			exit 1
			;;
		-*)
			OPTIND=0
			while getopts "hw:l:p:o:c:i:" opt; do
				case $opt in
					h)
						usage
						exit 0
						;;
					w)
						PKGDEST=$OPTARG
						shift
						;;
					l)
						LOGDEST=$OPTARG
						shift
						;;
					p)
						PACMANFILE=$OPTARG
						shift
						;;
					m)	
						MAKEPKGFILE=$OPTARG
						shift
						;;
					o)
						CONFIGFILE=$OPTARG
						shift
						;;
					c)
						CHROOTPATH=$OPTARG
						shift
						;;
					i)
						SCRIPTPATH=$OPTARG
						shift
						;;
					*)
						usage
						exit 1
						;;
				esac
			done
			;;
		*)
			if [ "$TARBALL" = "" ]; then
				TARBALL=$1
			fi
			;;
	esac
	shift
done

# check if config file is a valid file path
#if [ ! -f $CONFIGFILE ]; then
#	msg "No config file found: $CONFIGFILE"
#	usage
#	exit 1
#fi

# get configuration (done here so it can be specified on command line)
#source $CONFIGFILE

# now that we've sourced the config file - let's make referencing
# the most commmon path nice and easy
rootpath="/var/build/"

# resolve paths to absolute paths
if [ -n "$TARBALL" ]; then
	if echo $TARBALL | grep -v ^/ 2>&1 > /dev/null; then
		TARBALL="$(pwd)/$TARBALL"
	fi
fi

# if we aren't creating a tarball we have a problem
if [ \( "$TARBALL" = "" -o ! -f "$TARBALL" \) ]; then
	msg "Source package not found"
	usage
	exit 1
fi

# if PKGDEST or LOGDEST are undefined, set them to their defaults
if [ "$PKGDEST" = "" ]; then
	PKGDEST="/tmp"
fi
if [ "$LOGDEST" = "" ]; then
	LOGDEST="/tmp"
fi
if [ -n "$SCRIPTPATH" = "" ]; then
	sh $SCRIPTPATH
fi
#generating temp dirs
DESTCHROOTPATH=`mktemp -d`
TMPCHROOTPATH=`mktemp -d`
# set up the chroot directory
makeroot
if [ $? -ne 0 ]; then
	cleanup
	error "Can't create chroot directory"
	exit 1
fi


# mount package cache
fs_bind


# mount kernel stuff to make system sane
fs_mount
if [ $? -ne 0 ]; then
	fs_umount
	fs_unbind
	cleanup
	error "Problem mounting filesystems"
	exit 1
fi

# copy general configuration from host system
conf_update
if [ $? -ne 0 ]; then
	fs_umount
	fs_unbind
	cleanup
	error "Problem updating configs"
	exit 1
fi

if [ -f $TARBALL ]; then
	mkdir $rootpath
	cp $TARBALL $DESTCHROOTDIR/$rootpath/

	cp /usr/share/waka/build $DESTCHROOTDIR/$rootpath
	
	chmod +x $DESTCHROOTDIR/$rootpath/waka/build
	msg "Starting to build package..."
	# chroot and kick off the build...
	chroot $DESTCHROOTDIR/ $rootpath/build
	# ...and we're back. source the PKGBUILD for fetching the package
	source $DESTCHROOTDIR/$rootpath/waka/PKGBUILD

	# TODO this is going to fail hard with pacman3, there should be a better way
	mv $DESTCHROOTDIR/$rootpath/$pkgname*pkg.tar.gz $PKGDEST || warning "Package could not be retrieved!"
	cat $DESTCHROOTDIR/$rootpath/makepkg.log >> $LOGDEST/makepkg.log || warning "Logfile could not be retrieved!"
else
	error "Could not find source tarball!"
fi

fs_umount
fs_unbind
cleanup

